"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[935],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>h});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),d=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=d(a),m=r,h=u["".concat(s,".").concat(m)]||u[m]||p[m]||i;return a?n.createElement(h,o(o({ref:t},c),{},{components:a})):n.createElement(h,o({ref:t},c))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var d=2;d<i;d++)o[d]=a[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},5950:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var n=a(7462),r=(a(7294),a(3905));const i={sidebar_position:1},o="Validator Node Configuration",l={unversionedId:"become-a-validator/validator-set-up",id:"become-a-validator/validator-set-up",title:"Validator Node Configuration",description:"Instructions for configuring a Validator Node on the Nibiru Network. This setup assumes you're",source:"@site/docs/become-a-validator/validator-set-up.md",sourceDirName:"become-a-validator",slug:"/become-a-validator/validator-set-up",permalink:"/Documentation/become-a-validator/validator-set-up",draft:!1,editUrl:"https://github.com/Nibiru-Network/nibiru-docs.github.io/tree/main/docs/become-a-validator/validator-set-up.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Getting Started",permalink:"/Documentation/become-a-validator/get-started-validator"},next:{title:"Validator Staking",permalink:"/Documentation/become-a-validator/validator-staking"}},s={},d=[{value:"Hardware Requirements",id:"hardware-requirements",level:2},{value:"Directory Structure",id:"directory-structure",level:2},{value:"1. Setup System Environment",id:"1-setup-system-environment",level:2},{value:"a. Update and upgrade system",id:"a-update-and-upgrade-system",level:4},{value:"b. Install time synchronization",id:"b-install-time-synchronization",level:4},{value:"c. Start time synchronization",id:"c-start-time-synchronization",level:4},{value:"d. Check time syncronization status",id:"d-check-time-syncronization-status",level:4},{value:"e. Update System Language",id:"e-update-system-language",level:4},{value:"2 - Compile the Nibiru daemon",id:"2---compile-the-nibiru-daemon",level:2},{value:"3 - Setup the Nibiru working directory",id:"3---setup-the-nibiru-working-directory",level:2},{value:"a. Create the working directory",id:"a-create-the-working-directory",level:4},{value:"b. Copy the compiled Nibiru daemon to the working directory",id:"b-copy-the-compiled-nibiru-daemon-to-the-working-directory",level:4},{value:"c. Generate the miner address keystore file in the <code>/data/nibiru/data/keystore</code> directory",id:"c-generate-the-miner-address-keystore-file-in-the-datanibirudatakeystore-directory",level:4},{value:"d. Write the password for the key file to the <code>/data/nibiru/data/password.txt</code> file.",id:"d-write-the-password-for-the-key-file-to-the-datanibirudatapasswordtxt-file",level:4},{value:"4 - Begin syncing to Nibiru Network",id:"4---begin-syncing-to-nibiru-network",level:2},{value:"a. Create nbnchain.service file",id:"a-create-nbnchainservice-file",level:4},{value:"b. Start Nibiru service",id:"b-start-nibiru-service",level:4},{value:"c. Check if node is synchronizing",id:"c-check-if-node-is-synchronizing",level:3},{value:"5 - Update systemd daemon to be a validator",id:"5---update-systemd-daemon-to-be-a-validator",level:2},{value:"a. Modify the nbnchain.service file",id:"a-modify-the-nbnchainservice-file",level:4},{value:"b. Reload the daemon",id:"b-reload-the-daemon",level:4},{value:"c. Restart the nbnchain service",id:"c-restart-the-nbnchain-service",level:4}],c={toc:d},u="wrapper";function p(e){let{components:t,...i}=e;return(0,r.kt)(u,(0,n.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"validator-node-configuration"},"Validator Node Configuration"),(0,r.kt)("p",null,"Instructions for configuring a Validator Node on the Nibiru Network. This setup assumes you're\nlogged in as ",(0,r.kt)("inlineCode",{parentName:"p"},"root"),"."),(0,r.kt)("h2",{id:"hardware-requirements"},"Hardware Requirements"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Component"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Requirement"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"CPU"),(0,r.kt)("td",{parentName:"tr",align:"left"},"8 cores")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"RAM"),(0,r.kt)("td",{parentName:"tr",align:"left"},"32GB")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"OS"),(0,r.kt)("td",{parentName:"tr",align:"left"},"CentOS 7.2 64-bit")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"Disk (System)"),(0,r.kt)("td",{parentName:"tr",align:"left"},"100GB")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"Disk (Data)"),(0,r.kt)("td",{parentName:"tr",align:"left"},"2TB")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"Network"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Internet connection")))),(0,r.kt)("h2",{id:"directory-structure"},"Directory Structure"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Program directory: ",(0,r.kt)("inlineCode",{parentName:"li"},"/data/nibiru/bin")),(0,r.kt)("li",{parentName:"ul"},"Data directory: ",(0,r.kt)("inlineCode",{parentName:"li"},"/data/nibiru/data")),(0,r.kt)("li",{parentName:"ul"},"Default path: ",(0,r.kt)("inlineCode",{parentName:"li"},"/data/nibiru")),(0,r.kt)("li",{parentName:"ul"},"Mining file storage directory: ",(0,r.kt)("inlineCode",{parentName:"li"},"/data/nibiru/data/keystore"))),(0,r.kt)("h2",{id:"1-setup-system-environment"},"1. Setup System Environment"),(0,r.kt)("h4",{id:"a-update-and-upgrade-system"},"a. Update and upgrade system"),(0,r.kt)("p",null,"This ensures the system and packages are on the latest versions."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yum update -y && yum upgrade -y\n")),(0,r.kt)("h4",{id:"b-install-time-synchronization"},"b. Install time synchronization"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"chrony")," is a versatile implementation of the Network Time Protocol (NTP). It can synchronise\nthe system clock with NTP servers, reference clocks (e.g. GPS receiver), and manual input using\nwristwatch and keyboard. It can also operate as an NTPv4 (RFC 5905) server and peer to provide\na time service to other computers in the network."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yum -y install chrony\n")),(0,r.kt)("h4",{id:"c-start-time-synchronization"},"c. Start time synchronization"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"systemctl start chronyd\n")),(0,r.kt)("h4",{id:"d-check-time-syncronization-status"},"d. Check time syncronization status"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"systemctl status chronyd\n")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Alt text",src:a(2911).Z,width:"1518",height:"598"})),(0,r.kt)("h4",{id:"e-update-system-language"},"e. Update System Language"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo vim /etc/default/locale\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'LANG="en_US.UTG-8"\nLANGUAGE="en_US:en"\nlocale-gen -en_US:en\n')),(0,r.kt)("h2",{id:"2---compile-the-nibiru-daemon"},"2 - Compile the Nibiru daemon"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir -p /data/devent\ncd /data/devent\ngit clone https://github.com/Nibiru-Network/Nibiru.git \ncd Nibiru\nmake nbn (or make all)\n")),(0,r.kt)("h2",{id:"3---setup-the-nibiru-working-directory"},"3 - Setup the Nibiru working directory"),(0,r.kt)("h4",{id:"a-create-the-working-directory"},"a. Create the working directory"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir -p /data/nibiru/data\n")),(0,r.kt)("h4",{id:"b-copy-the-compiled-nibiru-daemon-to-the-working-directory"},"b. Copy the compiled Nibiru daemon to the working directory"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cp -r /data/devent/Nibiru/build/bin /data/nibiru/\n")),(0,r.kt)("h4",{id:"c-generate-the-miner-address-keystore-file-in-the-datanibirudatakeystore-directory"},"c. Generate the miner address keystore file in the ",(0,r.kt)("inlineCode",{parentName:"h4"},"/data/nibiru/data/keystore")," directory"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd /data/nibiru\n./bin/nbn --datadir data/ account new\n")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Alt text",src:a(7256).Z,width:"1559",height:"385"})),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Make sure to generate your own password instead of ",(0,r.kt)("inlineCode",{parentName:"strong"},"keypassword")," and don't forget it!")),(0,r.kt)("h4",{id:"d-write-the-password-for-the-key-file-to-the-datanibirudatapasswordtxt-file"},"d. Write the password for the key file to the ",(0,r.kt)("inlineCode",{parentName:"h4"},"/data/nibiru/data/password.txt")," file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"echo 'keypassword' > /data/nibiru/data/password.txt\n")),(0,r.kt)("h2",{id:"4---begin-syncing-to-nibiru-network"},"4 - Begin syncing to Nibiru Network"),(0,r.kt)("p",null,"Now that the keys have been created and the directory structure set,\nit's time to synchronize the node with the network."),(0,r.kt)("h4",{id:"a-create-nbnchainservice-file"},"a. Create nbnchain.service file"),(0,r.kt)("p",null,"This service file will synchronize your node with the network. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo cat <<EOF >> /lib/systemd/system/nbnchain.service\n[Unit]\nDescription=Ethereum Nibiru Chain\nAfter=network.target\n\n[Service]\nType=simple\nStandardOutput=syslog\nStandardError=syslog\nSyslogIdentifier=nibiru\nUser=root\nWorkingDirectory=/data/nibiru\nExecStart=/data/nibiru/bin/nbn --datadir /data/nibiru/data\nKillMode=process\nTimeoutStopSec=60\nRestart=on-failure\nRestartSec=5\nRemainAfterExit=no\n\n[Install]\nWantedBy=multi-user.target\nEOF\n")),(0,r.kt)("h4",{id:"b-start-nibiru-service"},"b. Start Nibiru service"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Create a self-starting node service")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"systemctl enable nbnchain\n")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Start the node service")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"systemctl start nbnchain\n")),(0,r.kt)("p",null,"To query the service to ensure it is running correctly,\nyou may run the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"systemctl status nbnchain\n")),(0,r.kt)("h3",{id:"c-check-if-node-is-synchronizing"},"c. Check if node is synchronizing"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Enter the console")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd /data/nibiru/\n./bin/nbn attach data/nbn.ipc\n")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Check the sync status")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"> eth.syncing\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"True")," = Synchronization still in progress"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"False")," = Synchronization is complete"),(0,r.kt)("p",null,"Once the node is synced with the network, you can continue on to step 5."),(0,r.kt)("h2",{id:"5---update-systemd-daemon-to-be-a-validator"},"5 - Update systemd daemon to be a validator"),(0,r.kt)("p",null,"Now that the node is synced, you may turn it into a validator. The first step\nis to update the service file so that it may sign blocks. Currently it has no\naccess to the keys you created before, so we'll need to fix that. The only\nline that needs modified is the ",(0,r.kt)("inlineCode",{parentName:"p"},"ExecStart")," row."),(0,r.kt)("h4",{id:"a-modify-the-nbnchainservice-file"},"a. Modify the nbnchain.service file"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo vim /lib/systemd/system/nbnchain.service\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ini"},"[Unit]\nDescription=Ethereum Nibiru chain\nAfter=network.target\n\n[Service]\nType=simple\nStandardOutput=syslog\nStandardError=syslog\nSyslogIdentifier=nibiru\nUser=root\nWorkingDirectory=/data/nibiru\nExecStart=/data/nibiru/bin/nbn --datadir /data/nibiru/data --allow-insecure-unlock  -unlock 'MINER_ADDRESS_HERE' --password /data/nibiru/data/password.txt --mine \nKillMode=process\nTimeoutStopSec=60\nRestart=on-failure\nRestartSec=5\nRemainAfterExit=no\n\n[Install]\nWantedBy=multi-user.target\n")),(0,r.kt)("h4",{id:"b-reload-the-daemon"},"b. Reload the daemon"),(0,r.kt)("p",null,"This informs the operating system that a change has been made in the\nservice file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo systemctl daemon-reload\n")),(0,r.kt)("h4",{id:"c-restart-the-nbnchain-service"},"c. Restart the nbnchain service"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo systemctl restart nbnchain\n")),(0,r.kt)("p",null,"Now that your node is synced and the service file is set up to be a validator on Nibiru Network,\nyou may now continue and ",(0,r.kt)("a",{parentName:"p",href:"/Documentation/become-a-validator/validator-staking"},(0,r.kt)("strong",{parentName:"a"},"stake to your validator")),"."))}p.isMDXComponent=!0},2911:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/check_time_synchronization-9a8da82cff2fde3c6ada3c6763d807ec.png"},7256:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/keypassword-e1e35c6516a4d73994600e12dac64c6b.png"}}]);