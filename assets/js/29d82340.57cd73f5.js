"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[935],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>k});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(a),m=r,k=c["".concat(s,".").concat(m)]||c[m]||u[m]||i;return a?n.createElement(k,o(o({ref:t},d),{},{components:a})):n.createElement(k,o({ref:t},d))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},5950:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const i={sidebar_position:1},o="Validator Node Configuration",l={unversionedId:"become-a-validator/validator-set-up",id:"become-a-validator/validator-set-up",title:"Validator Node Configuration",description:"Instructions for configuring a Validator Node on the Nibiru Network.",source:"@site/docs/become-a-validator/validator-set-up.md",sourceDirName:"become-a-validator",slug:"/become-a-validator/validator-set-up",permalink:"/Documentation/become-a-validator/validator-set-up",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/become-a-validator/validator-set-up.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Getting Started",permalink:"/Documentation/become-a-validator/get-started-validator"},next:{title:"Validator Staking",permalink:"/Documentation/become-a-validator/validator-staking"}},s={},p=[{value:"Hardware Requirements",id:"hardware-requirements",level:2},{value:"Directory Structures",id:"directory-structures",level:2},{value:"1.  Udpate System Environment",id:"1--udpate-system-environment",level:2},{value:"2 - Compile the Node Program",id:"2---compile-the-node-program",level:2},{value:"3 - Deploy the Node",id:"3---deploy-the-node",level:2},{value:"4 - Create the Nibiru Startup Service",id:"4---create-the-nibiru-startup-service",level:2},{value:"5 - Start Nibiru Services",id:"5---start-nibiru-services",level:2},{value:"6 - Console Check",id:"6---console-check",level:2}],d={toc:p},c="wrapper";function u(e){let{components:t,...i}=e;return(0,r.kt)(c,(0,n.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"validator-node-configuration"},"Validator Node Configuration"),(0,r.kt)("p",null,"Instructions for configuring a Validator Node on the Nibiru Network."),(0,r.kt)("h2",{id:"hardware-requirements"},"Hardware Requirements"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Component"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Requirement"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"CPU"),(0,r.kt)("td",{parentName:"tr",align:"left"},"8 cores")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"RAM"),(0,r.kt)("td",{parentName:"tr",align:"left"},"32GB")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"OS"),(0,r.kt)("td",{parentName:"tr",align:"left"},"CentOS 7.2 64-bit")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"Disk (System)"),(0,r.kt)("td",{parentName:"tr",align:"left"},"100GB")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"Disk (Data)"),(0,r.kt)("td",{parentName:"tr",align:"left"},"2TB")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"Network"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Internet connection")))),(0,r.kt)("h2",{id:"directory-structures"},"Directory Structures"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Program directory: ",(0,r.kt)("inlineCode",{parentName:"li"},"/data/nibiru/bin")),(0,r.kt)("li",{parentName:"ul"},"Data directory: ",(0,r.kt)("inlineCode",{parentName:"li"},"/data/nibiru/data")),(0,r.kt)("li",{parentName:"ul"},"Default path: ",(0,r.kt)("inlineCode",{parentName:"li"},"/data/nibiru")),(0,r.kt)("li",{parentName:"ul"},"Mining file storage directory: ",(0,r.kt)("inlineCode",{parentName:"li"},"/data/nibiru/data/keystore"))),(0,r.kt)("h2",{id:"1--udpate-system-environment"},"1.  Udpate System Environment"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Time Syncronization")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# yum udpate -y\n# yum upgrade -y\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Deploy time synchronization")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# yum -y instal chrony\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Start time synchronization")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# systemctl start chronyd\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Check time syncronization status")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# systemctl status chronyd\n")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Alt text",src:a(551).Z,width:"1518",height:"598"})),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Udpate System Language")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# sudo vim /etc/default/locale\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'LANG="en_US.UTG-8"\nLANGUAGE="en_US:en"\nlocale-gen -en_US:en\n')),(0,r.kt)("h2",{id:"2---compile-the-node-program"},"2 - Compile the Node Program"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# mkdir -p /data/devent\n# cd /data/devent\n# git clone --recurse \uff08this process is not needed\uff09\n# cd nibiru\n# make all\n")),(0,r.kt)("h2",{id:"3---deploy-the-node"},"3 - Deploy the Node"),(0,r.kt)("p",null,"Create the working directory"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# mkdir -p /data/nibiru/data\n")),(0,r.kt)("p",null,"Copy the compiled node program to the working directory"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# cp -r /data/devent/nibiru/build/bin /data/nibiru/\n")),(0,r.kt)("p",null,"Generate the miner address keystore file in the ",(0,r.kt)("inlineCode",{parentName:"p"},"/data/nibiru/data/keystore")," directory"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# cd /data/nibiru\n# ./bin/nbn --datadir data/ account new\n")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Alt text",src:a(9375).Z,width:"1559",height:"385"})),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Make sure to generate your own password instead of ",(0,r.kt)("inlineCode",{parentName:"strong"},"keypassword")," and don't forget it!")),(0,r.kt)("p",null,"Write the password for the key file to the ",(0,r.kt)("inlineCode",{parentName:"p"},"/data/nibiru/data/password.txt")," file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# echo 'keypassword' > /data/nibiru/data/password.txt\n")),(0,r.kt)("h2",{id:"4---create-the-nibiru-startup-service"},"4 - Create the Nibiru Startup Service"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Start synchronous node mining"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# vim /lib/systemd/system/nbnchain.service\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"[Unit]\n Description=Ethereum Nibiru Chain\n After=network.target\n \n [Service]\n Type=simple\n StandardOutput=syslog\n StandardError=syslog\n SyslogIdentifier=nibiru\n User=root\n WorkingDirectory=/data/nibiru\n ExecStart=/data/nibiru/bin/nbn --datadir /data/nibiru/data\n KillMode=process\n TimeoutStopSec=60\n Restart=on-failure\n RestartSec=5\n RemainAfterExit=no\n \n [Install]\n WantedBy=multi-user.target\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Stop synchronous node mining"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# vim /lib/systemd/system/nbnchain.service\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"[Unit]\n Description=Ethereum Nibiru chain\n After=network.target\n \n [Service]\n Type=simple\n StandardOutput=syslog\n StandardError=syslog\n SyslogIdentifier=nibiru\n User=root\n WorkingDirectory=/data/nibiru\n ExecStart=/data/nibiru/bin/nbn --datadir /data/nibiru/data --allow-insecure-unlock  -unlock \u2018Miner address\u2019 --password /data/nibiru/data/password.txt --mine \n KillMode=process\n TimeoutStopSec=60\n Restart=on-failure\n RestartSec=5\n RemainAfterExit=no\n \n [Install]\n WantedBy=multi-user.target\n")))),(0,r.kt)("h2",{id:"5---start-nibiru-services"},"5 - Start Nibiru Services"),(0,r.kt)("p",null,"Create a self-starting node service"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# systemctl enable nbnchain\n")),(0,r.kt)("p",null,"Start the node service"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# systemctl start nbnchain\n")),(0,r.kt)("p",null,"Query the service running status"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# systemctl status nbnchain\n")),(0,r.kt)("h2",{id:"6---console-check"},"6 - Console Check"),(0,r.kt)("p",null,"Enter the console"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# ./bin/nbn attach data/nbn.ipc\n")),(0,r.kt)("p",null,"Check the sync status"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"> eth.syncing\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"True")," = Synchronization still in progress"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"False")," = Synchronization is complete"))}u.isMDXComponent=!0},551:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/check_time_synchronization-9a8da82cff2fde3c6ada3c6763d807ec.png"},9375:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/keypassword-e1e35c6516a4d73994600e12dac64c6b.png"}}]);